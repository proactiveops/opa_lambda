name: Go
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main

jobs:
  golang:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Go
        id: setup
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.x'

      - name: Install dependencies
        id: deps
        working-directory: lambda
        run: go get .

      - name: Build
        id: build
        working-directory: lambda
        run: GOARCH=$([ "$RUNNER_ARCH" = "ARM64" ] && echo "arm64" || echo "amd64") go build -tags lambda.norpc -o bootstrap main.go
        env:
          GOOS: linux

      - name: Go test
        id: test
        working-directory: lambda
        run: go test ./... -cover
  
  terraform:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.7'

      - name: Terraform Format
        id: format
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: tfsec
        id: tfsec
        uses: aquasecurity/tfsec-action@b466648d6e39e7c75324f25d83891162a721f2d6 # v1.0.3
        with:
          github_token: ${{ github.token }}

      - name: Setup TFLint
        id: tflint-setup
        uses: terraform-linters/setup-tflint@19a52fbac37dacb22a09518e4ef6ee234f2d4987 # v4.0.0
        with:
          tflint_version: v0.48.0

      - name: Init TFLint
        id: tflint-init
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        id: tflint
        run: tflint -f compact